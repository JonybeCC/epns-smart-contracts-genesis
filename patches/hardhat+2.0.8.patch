diff --git a/node_modules/hardhat/src/internal/hardhat-network/provider/modules/eth.ts b/node_modules/hardhat/src/internal/hardhat-network/provider/modules/eth.ts
index de2600a..0a022e9 100644
--- a/node_modules/hardhat/src/internal/hardhat-network/provider/modules/eth.ts
+++ b/node_modules/hardhat/src/internal/hardhat-network/provider/modules/eth.ts
@@ -249,7 +249,19 @@ export class EthModule {
         throw new MethodNotSupportedError(method);
 
       case "eth_signTypedData":
-        return this._signTypedDataAction(...this._signTypedDataParams(params));
+        throw new MethodNotSupportedError(method);
+
+      case "eth_signTypedData_v3":
+        throw new MethodNotSupportedError(method);
+
+      // TODO: we're currently mimicking the MetaMask implementation here.
+      // The EIP 712 is still a draft. It doesn't actually distinguish different versions
+      // of the eth_signTypedData API.
+      // Also, note that go-ethereum implemented this in a clef JSON-RPC API: account_signTypedData.
+      case "eth_signTypedData_v4":
+        return this._signTypedDataV4Action(
+          ...this._signTypedDataV4Params(params)
+        );
 
       case "eth_submitHashrate":
         throw new MethodNotSupportedError(method);
@@ -881,17 +893,34 @@ export class EthModule {
 
   // eth_signTransaction
 
-  // eth_signTypedData
+  // eth_signTypedData_v4
 
-  private _signTypedDataParams(params: any[]): [Buffer, any] {
+  private _signTypedDataV4Params(params: any[]): [Buffer, any] {
+    // Validation of the TypedData parameter is handled by eth-sig-util
     return validateParams(params, rpcAddress, rpcUnknown);
   }
 
-  private async _signTypedDataAction(
+  private async _signTypedDataV4Action(
     address: Buffer,
     typedData: any
   ): Promise<string> {
-    return this._node.signTypedData(address, typedData);
+    let typedMessage: any = typedData;
+
+    // According to the MetaMask implementation,
+    // the message parameter may be JSON stringified in versions later than V1
+    // See https://github.com/MetaMask/metamask-extension/blob/0dfdd44ae7728ed02cbf32c564c75b74f37acf77/app/scripts/metamask-controller.js#L1736
+    // In fact, ethers.js JSON stringifies the message at the time of writing.
+    if (typeof typedData === "string") {
+      try {
+        typedMessage = JSON.parse(typedData);
+      } catch (error) {
+        throw new InvalidInputError(
+          `The message parameter is an invalid JSON. Either pass a valid JSON or a plain object conforming to EIP712 TypedData schema.`
+        );
+      }
+    }
+
+    return this._node.signTypedDataV4(address, typedMessage);
   }
 
   // eth_submitHashrate
diff --git a/node_modules/hardhat/src/internal/hardhat-network/provider/node.ts b/node_modules/hardhat/src/internal/hardhat-network/provider/node.ts
index a9b308b..3a4ea43 100644
--- a/node_modules/hardhat/src/internal/hardhat-network/provider/node.ts
+++ b/node_modules/hardhat/src/internal/hardhat-network/provider/node.ts
@@ -6,6 +6,7 @@ import { RunBlockResult } from "@nomiclabs/ethereumjs-vm/dist/runBlock";
 import { StateManager } from "@nomiclabs/ethereumjs-vm/dist/state";
 import chalk from "chalk";
 import debug from "debug";
+import * as ethSigUtil from "eth-sig-util";
 import Common from "ethereumjs-common";
 import { FakeTransaction, Transaction } from "ethereumjs-tx";
 import {
@@ -75,10 +76,6 @@ import { putGenesisBlock } from "./utils/putGenesisBlock";
 
 const log = debug("hardhat:core:hardhat-network:node");
 
-// This library's types are wrong, they don't type check
-// tslint:disable-next-line no-var-requires
-const ethSigUtil = require("eth-sig-util");
-
 export const COINBASE_ADDRESS = toBuffer(
   "0xc014ba5ec014ba5ec014ba5ec014ba5ec014ba5e"
 );
@@ -623,7 +620,10 @@ export class HardhatNode extends EventEmitter {
     return ecsign(messageHash, privateKey);
   }
 
-  public async signTypedData(address: Buffer, typedData: any): Promise<string> {
+  public async signTypedDataV4(
+    address: Buffer,
+    typedData: any
+  ): Promise<string> {
     const privateKey = this._getLocalAccountPrivateKey(address);
 
     return ethSigUtil.signTypedData_v4(privateKey, {
